{
  
    
        "post0": {
            "title": "9장 불균형 범주의 문제",
            "content": "9.4 &#49548;&#49688;&#51665;&#45800; &#45936;&#51060;&#53552; &#50629;&#49368;&#54540;&#47553;&#54616;&#44592; . from sklearn.utils import resample mask = df.survived == 1 surv_df = df[mask] death_df = df[~mask] df_upsample = resample( surv_df, replace=True, n_samples=len(death_df), random_state=42, ) df2 = pd.concat([death_df, df_upsample]) df2.survived.value_counts() . 1 809 0 809 Name: survived, dtype: int64 . from imblearn.over_sampling import ( RandomOverSampler, ) ros = RandomOverSampler(random_state=42) X_ros, y_ros = ros.fit_sample(X, y) pd.Series(y_ros).value_counts() . 1 809 0 809 dtype: int64 . 9.5 &#44284;&#48152;&#49688;&#51665;&#45800; &#45936;&#51060;&#53552;&#47484; &#45796;&#50868;&#49368;&#54540;&#47553;&#54616;&#44592; . from sklearn.utils import resample mask = df.survived == 1 surv_df = df[mask] death_df = df[~mask] df_downsample = resample( death_df, replace=False, n_samples=len(surv_df), random_state=42, ) df3 = pd.concat([surv_df, df_downsample]) df3.survived.value_counts() . 1 500 0 500 Name: survived, dtype: int64 .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter9/",
            "relUrl": "/chapter9/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "8장 특징의 선택",
            "content": "8.1 &#44277;&#49440;&#49457;&#51012; &#44032;&#51652; &#50676; . import numpy as np threshold = 0.95 corr = agg_df.corr() mask = np.triu( np.ones(corr.shape), k=1 ).astype(bool) corr_no_diag = corr.where(mask) coll = [ c for c in corr_no_diag.columns if any(abs(corr_no_diag[c]) &gt; threshold) ] coll . [&#39;pclass_min&#39;, &#39;pclass_max&#39;, &#39;pclass_mean&#39;, &#39;sibsp_mean&#39;, &#39;parch_mean&#39;, &#39;fare_mean&#39;, &#39;body_min&#39;, &#39;body_max&#39;, &#39;body_mean&#39;, &#39;body_sum&#39;] . url = &quot;https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.xls&quot; df = pd.read_excel(url) orig_df = df def tweak_titanic(df): df = df.drop( columns=[ &quot;name&quot;, &quot;ticket&quot;, &quot;home.dest&quot;, &quot;boat&quot;, &quot;body&quot;, &quot;cabin&quot;, ] ).pipe(pd.get_dummies, drop_first=True) return df def get_train_test_X_y(df, y_col, size=0.3, std_cols=None): y = df[y_col] X = df.drop(columns=y_col) X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=size, random_state=42 ) cols = X.columns num_cols = [ &quot;pclass&quot;, &quot;age&quot;, &quot;sibsp&quot;, &quot;parch&quot;, &quot;fare&quot;, ] fi = impute.IterativeImputer() X_train.loc[:, num_cols] = fi.fit_transform(X_train[num_cols]) X_test.loc[:, num_cols] = fi.transform(X_test[num_cols]) if std_cols: std = preprocessing.StandardScaler() X_train.loc[:, std_cols] = std.fit_transform(X_train[std_cols]) X_test.loc[:, std_cols] = std.transform(X_test[std_cols]) return X_train, X_test, y_train, y_test ti_df = tweak_titanic(orig_df) X_train, X_test, y_train, y_test = get_train_test_X_y(ti_df, &quot;survived&quot;) . import rfpimp rfpimp.plot_dependence_heatmap( rfpimp.feature_dependence_matrix(X_train), value_fontsize=12, label_fontsize=14, figsize=(8, 8), ) fig = plt.gcf() . from sklearn.ensemble import ( RandomForestClassifier, ) cols_to_remove = [ &quot;pclass&quot;, &quot;sibsp&quot;, &quot;parch&quot;, &quot;embarked_Q&quot;, ] rf3 = RandomForestClassifier(random_state=42) rf3.fit( X_train[ [ c for c in X_train.columns if c not in cols_to_remove ] ], y_train, ) rf3.score( X_test[ [ c for c in X_train.columns if c not in cols_to_remove ] ], y_test, ) . 0.7608142493638677 . 8.2 &#46972;&#49548; &#54924;&#44480; . from sklearn import linear_model model = linear_model.LassoLarsCV( cv=10, max_n_alphas=10 ).fit(X_train, y_train) fig, ax = plt.subplots(figsize=(12, 8)) cm = iter( plt.get_cmap(&quot;tab20&quot;)( np.linspace(0, 1, X.shape[1]) ) ) for i in range(X.shape[1]): c = next(cm) ax.plot( model.alphas_, model.coef_path_.T[:, i], c=c, alpha=0.8, label=X.columns[i], ) ax.axvline( model.alpha_, linestyle=&quot;-&quot;, c=&quot;k&quot;, label=&quot;alphaCV&quot;, ) plt.ylabel(&quot;Regression Coefficients&quot;) ax.legend(X.columns, bbox_to_anchor=(1, 1)) plt.xlabel(&quot;alpha&quot;) plt.title( &quot;Regression Coefficients Progression for Lasso Paths&quot; ) . Text(0.5,1,&#39;Regression Coefficients Progression for Lasso Paths&#39;) . &#51116;&#44480;&#51201; &#53945;&#51669; &#51228;&#44144; . from yellowbrick.features import RFECV fig, ax = plt.subplots(figsize=(6, 4)) rfe = RFECV( ensemble.RandomForestClassifier( n_estimators=100 ), cv=5, ) rfe.fit(X, y) rfe.rfe_estimator_.ranking_ . array([1, 1, 1, 1, 1, 1, 3, 2]) . rfe.rfe_estimator_.n_features_ . 6 . rfe.poof() . 8.4 &#49345;&#54840; &#51221;&#48372;&#47049; . from sklearn import feature_selection mic = feature_selection.mutual_info_classif(X, y) fig, ax = plt.subplots(figsize=(10, 8)) ( pd.DataFrame( {&quot;feature&quot;: X.columns, &quot;vimp&quot;: mic} ) .set_index(&quot;feature&quot;) .plot.barh(ax=ax) ) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f5ed5e6b0d0&gt; .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter8/",
            "relUrl": "/chapter8/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "7장 데이터 전처리",
            "content": "X2 = pd.DataFrame( { &quot;a&quot;: range(5), &quot;b&quot;: [-100, -50, 0, 200, 1000], } ) X2 . a b . 0 0 | -100 | . 1 1 | -50 | . 2 2 | 0 | . 3 3 | 200 | . 4 4 | 1000 | . 7.1 &#54364;&#51456;&#54868; . from sklearn import preprocessing std = preprocessing.StandardScaler() std.fit_transform(X2) . array([[-1.41421356, -0.75995002], [-0.70710678, -0.63737744], [ 0. , -0.51480485], [ 0.70710678, -0.02451452], [ 1.41421356, 1.93664683]]) . std.scale_ . array([ 1.41421356, 407.92156109]) . std.mean_ . array([ 2., 210.]) . std.var_ . array([2.000e+00, 1.664e+05]) . X_std = (X2 - X2.mean()) / X2.std() X_std . a b . 0 -1.264911 | -0.679720 | . 1 -0.632456 | -0.570088 | . 2 0.000000 | -0.460455 | . 3 0.632456 | -0.021926 | . 4 1.264911 | 1.732190 | . X_std.mean() . a 4.440892e-17 b 0.000000e+00 dtype: float64 . X_std.std() . a 1.0 b 1.0 dtype: float64 . X3 = X2.copy() scale_vars(X3, mapper=None) #fastai function locally imported X3.std() . a 1.118034 b 1.118034 dtype: float64 . X3.mean() . a 0.000000e+00 b 4.440892e-17 dtype: float64 . 7.2 &#48276;&#50948; &#51312;&#51221; . from sklearn import preprocessing mms = preprocessing.MinMaxScaler() mms.fit(X2) mms.transform(X2) . array([[0. , 0. ], [0.25 , 0.04545455], [0.5 , 0.09090909], [0.75 , 0.27272727], [1. , 1. ]]) . (X2 - X2.min()) / (X2.max() - X2.min()) . a b . 0 0.00 | 0.000000 | . 1 0.25 | 0.045455 | . 2 0.50 | 0.090909 | . 3 0.75 | 0.272727 | . 4 1.00 | 1.000000 | . 7.3 &#45908;&#48120; &#48320;&#49688; . X_cat = pd.DataFrame( { &quot;name&quot;: [&quot;George&quot;, &quot;Paul&quot;], &quot;inst&quot;: [&quot;Bass&quot;, &quot;Guitar&quot;], } ) X_cat . name inst . 0 George | Bass | . 1 Paul | Guitar | . pd.get_dummies(X_cat, drop_first=True) . name_Paul inst_Guitar . 0 0 | 0 | . 1 1 | 1 | . import janitor as jn X_cat2 = pd.DataFrame( { &quot;A&quot;: [1, None, 3], &quot;names&quot;: [ &quot;Fred,George&quot;, &quot;George&quot;, &quot;John,Paul&quot;, ], } ) jn.expand_column(X_cat2, &quot;names&quot;, sep=&quot;,&quot;) . A names Fred George John Paul . 0 1.0 | Fred,George | 1 | 1 | 0 | 0 | . 1 NaN | George | 0 | 1 | 0 | 0 | . 2 3.0 | John,Paul | 0 | 0 | 1 | 1 | . 7.4 &#47112;&#51060;&#48660; &#51064;&#53076;&#45908; . from sklearn import preprocessing lab = preprocessing.LabelEncoder() lab.fit_transform(X_cat[&#39;inst&#39;]) . array([0, 1]) . lab.inverse_transform([1, 1, 0]) . array([&#39;Guitar&#39;, &#39;Guitar&#39;, &#39;Bass&#39;], dtype=object) . X_cat.name.astype( &quot;category&quot; ).cat.as_ordered().cat.codes + 1 . 0 1 1 2 dtype: int8 . 7.5 &#54532;&#47532;&#53248;&#49884; &#51064;&#53076;&#46377; . mapping = X_cat.name.value_counts() X_cat.name.map(mapping) . 0 1 1 1 Name: name, dtype: int64 . 7.6 &#47928;&#51088;&#50676;&#50640;&#49436; &#48276;&#51452; &#44032;&#51256;&#50724;&#44592; . df . pclass survived name sex age sibsp parch ticket fare cabin embarked boat body home.dest . 0 1 | 1 | Allen, Miss. Elisabeth Walton | female | 29.0000 | 0 | 0 | 24160 | 211.3375 | B5 | S | 2 | NaN | St Louis, MO | . 1 1 | 1 | Allison, Master. Hudson Trevor | male | 0.9167 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | 11 | NaN | Montreal, PQ / Chesterville, ON | . 2 1 | 0 | Allison, Miss. Helen Loraine | female | 2.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | . 3 1 | 0 | Allison, Mr. Hudson Joshua Creighton | male | 30.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | 135.0 | Montreal, PQ / Chesterville, ON | . 4 1 | 0 | Allison, Mrs. Hudson J C (Bessie Waldo Daniels) | female | 25.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | . 5 1 | 1 | Anderson, Mr. Harry | male | 48.0000 | 0 | 0 | 19952 | 26.5500 | E12 | S | 3 | NaN | New York, NY | . 6 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.0000 | 1 | 0 | 13502 | 77.9583 | D7 | S | 10 | NaN | Hudson, NY | . 7 1 | 0 | Andrews, Mr. Thomas Jr | male | 39.0000 | 0 | 0 | 112050 | 0.0000 | A36 | S | NaN | NaN | Belfast, NI | . 8 1 | 1 | Appleton, Mrs. Edward Dale (Charlotte Lamson) | female | 53.0000 | 2 | 0 | 11769 | 51.4792 | C101 | S | D | NaN | Bayside, Queens, NY | . 9 1 | 0 | Artagaveytia, Mr. Ramon | male | 71.0000 | 0 | 0 | PC 17609 | 49.5042 | NaN | C | NaN | 22.0 | Montevideo, Uruguay | . 10 1 | 0 | Astor, Col. John Jacob | male | 47.0000 | 1 | 0 | PC 17757 | 227.5250 | C62 C64 | C | NaN | 124.0 | New York, NY | . 11 1 | 1 | Astor, Mrs. John Jacob (Madeleine Talmadge Force) | female | 18.0000 | 1 | 0 | PC 17757 | 227.5250 | C62 C64 | C | 4 | NaN | New York, NY | . 12 1 | 1 | Aubart, Mme. Leontine Pauline | female | 24.0000 | 0 | 0 | PC 17477 | 69.3000 | B35 | C | 9 | NaN | Paris, France | . 13 1 | 1 | Barber, Miss. Ellen &quot;Nellie&quot; | female | 26.0000 | 0 | 0 | 19877 | 78.8500 | NaN | S | 6 | NaN | NaN | . 14 1 | 1 | Barkworth, Mr. Algernon Henry Wilson | male | 80.0000 | 0 | 0 | 27042 | 30.0000 | A23 | S | B | NaN | Hessle, Yorks | . 15 1 | 0 | Baumann, Mr. John D | male | NaN | 0 | 0 | PC 17318 | 25.9250 | NaN | S | NaN | NaN | New York, NY | . 16 1 | 0 | Baxter, Mr. Quigg Edmond | male | 24.0000 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | NaN | NaN | Montreal, PQ | . 17 1 | 1 | Baxter, Mrs. James (Helene DeLaudeniere Chaput) | female | 50.0000 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | 6 | NaN | Montreal, PQ | . 18 1 | 1 | Bazzani, Miss. Albina | female | 32.0000 | 0 | 0 | 11813 | 76.2917 | D15 | C | 8 | NaN | NaN | . 19 1 | 0 | Beattie, Mr. Thomson | male | 36.0000 | 0 | 0 | 13050 | 75.2417 | C6 | C | A | NaN | Winnipeg, MN | . 20 1 | 1 | Beckwith, Mr. Richard Leonard | male | 37.0000 | 1 | 1 | 11751 | 52.5542 | D35 | S | 5 | NaN | New York, NY | . 21 1 | 1 | Beckwith, Mrs. Richard Leonard (Sallie Monypeny) | female | 47.0000 | 1 | 1 | 11751 | 52.5542 | D35 | S | 5 | NaN | New York, NY | . 22 1 | 1 | Behr, Mr. Karl Howell | male | 26.0000 | 0 | 0 | 111369 | 30.0000 | C148 | C | 5 | NaN | New York, NY | . 23 1 | 1 | Bidois, Miss. Rosalie | female | 42.0000 | 0 | 0 | PC 17757 | 227.5250 | NaN | C | 4 | NaN | NaN | . 24 1 | 1 | Bird, Miss. Ellen | female | 29.0000 | 0 | 0 | PC 17483 | 221.7792 | C97 | S | 8 | NaN | NaN | . 25 1 | 0 | Birnbaum, Mr. Jakob | male | 25.0000 | 0 | 0 | 13905 | 26.0000 | NaN | C | NaN | 148.0 | San Francisco, CA | . 26 1 | 1 | Bishop, Mr. Dickinson H | male | 25.0000 | 1 | 0 | 11967 | 91.0792 | B49 | C | 7 | NaN | Dowagiac, MI | . 27 1 | 1 | Bishop, Mrs. Dickinson H (Helen Walton) | female | 19.0000 | 1 | 0 | 11967 | 91.0792 | B49 | C | 7 | NaN | Dowagiac, MI | . 28 1 | 1 | Bissette, Miss. Amelia | female | 35.0000 | 0 | 0 | PC 17760 | 135.6333 | C99 | S | 8 | NaN | NaN | . 29 1 | 1 | Bjornstrom-Steffansson, Mr. Mauritz Hakan | male | 28.0000 | 0 | 0 | 110564 | 26.5500 | C52 | S | D | NaN | Stockholm, Sweden / Washington, DC | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1279 3 | 0 | Vestrom, Miss. Hulda Amanda Adolfina | female | 14.0000 | 0 | 0 | 350406 | 7.8542 | NaN | S | NaN | NaN | NaN | . 1280 3 | 0 | Vovk, Mr. Janko | male | 22.0000 | 0 | 0 | 349252 | 7.8958 | NaN | S | NaN | NaN | NaN | . 1281 3 | 0 | Waelens, Mr. Achille | male | 22.0000 | 0 | 0 | 345767 | 9.0000 | NaN | S | NaN | NaN | Antwerp, Belgium / Stanton, OH | . 1282 3 | 0 | Ware, Mr. Frederick | male | NaN | 0 | 0 | 359309 | 8.0500 | NaN | S | NaN | NaN | NaN | . 1283 3 | 0 | Warren, Mr. Charles William | male | NaN | 0 | 0 | C.A. 49867 | 7.5500 | NaN | S | NaN | NaN | NaN | . 1284 3 | 0 | Webber, Mr. James | male | NaN | 0 | 0 | SOTON/OQ 3101316 | 8.0500 | NaN | S | NaN | NaN | NaN | . 1285 3 | 0 | Wenzel, Mr. Linhart | male | 32.5000 | 0 | 0 | 345775 | 9.5000 | NaN | S | NaN | 298.0 | NaN | . 1286 3 | 1 | Whabee, Mrs. George Joseph (Shawneene Abi-Saab) | female | 38.0000 | 0 | 0 | 2688 | 7.2292 | NaN | C | C | NaN | NaN | . 1287 3 | 0 | Widegren, Mr. Carl/Charles Peter | male | 51.0000 | 0 | 0 | 347064 | 7.7500 | NaN | S | NaN | NaN | NaN | . 1288 3 | 0 | Wiklund, Mr. Jakob Alfred | male | 18.0000 | 1 | 0 | 3101267 | 6.4958 | NaN | S | NaN | 314.0 | NaN | . 1289 3 | 0 | Wiklund, Mr. Karl Johan | male | 21.0000 | 1 | 0 | 3101266 | 6.4958 | NaN | S | NaN | NaN | NaN | . 1290 3 | 1 | Wilkes, Mrs. James (Ellen Needs) | female | 47.0000 | 1 | 0 | 363272 | 7.0000 | NaN | S | NaN | NaN | NaN | . 1291 3 | 0 | Willer, Mr. Aaron (&quot;Abi Weller&quot;) | male | NaN | 0 | 0 | 3410 | 8.7125 | NaN | S | NaN | NaN | NaN | . 1292 3 | 0 | Willey, Mr. Edward | male | NaN | 0 | 0 | S.O./P.P. 751 | 7.5500 | NaN | S | NaN | NaN | NaN | . 1293 3 | 0 | Williams, Mr. Howard Hugh &quot;Harry&quot; | male | NaN | 0 | 0 | A/5 2466 | 8.0500 | NaN | S | NaN | NaN | NaN | . 1294 3 | 0 | Williams, Mr. Leslie | male | 28.5000 | 0 | 0 | 54636 | 16.1000 | NaN | S | NaN | 14.0 | NaN | . 1295 3 | 0 | Windelov, Mr. Einar | male | 21.0000 | 0 | 0 | SOTON/OQ 3101317 | 7.2500 | NaN | S | NaN | NaN | NaN | . 1296 3 | 0 | Wirz, Mr. Albert | male | 27.0000 | 0 | 0 | 315154 | 8.6625 | NaN | S | NaN | 131.0 | NaN | . 1297 3 | 0 | Wiseman, Mr. Phillippe | male | NaN | 0 | 0 | A/4. 34244 | 7.2500 | NaN | S | NaN | NaN | NaN | . 1298 3 | 0 | Wittevrongel, Mr. Camille | male | 36.0000 | 0 | 0 | 345771 | 9.5000 | NaN | S | NaN | NaN | NaN | . 1299 3 | 0 | Yasbeck, Mr. Antoni | male | 27.0000 | 1 | 0 | 2659 | 14.4542 | NaN | C | C | NaN | NaN | . 1300 3 | 1 | Yasbeck, Mrs. Antoni (Selini Alexander) | female | 15.0000 | 1 | 0 | 2659 | 14.4542 | NaN | C | NaN | NaN | NaN | . 1301 3 | 0 | Youseff, Mr. Gerious | male | 45.5000 | 0 | 0 | 2628 | 7.2250 | NaN | C | NaN | 312.0 | NaN | . 1302 3 | 0 | Yousif, Mr. Wazli | male | NaN | 0 | 0 | 2647 | 7.2250 | NaN | C | NaN | NaN | NaN | . 1303 3 | 0 | Yousseff, Mr. Gerious | male | NaN | 0 | 0 | 2627 | 14.4583 | NaN | C | NaN | NaN | NaN | . 1304 3 | 0 | Zabour, Miss. Hileni | female | 14.5000 | 1 | 0 | 2665 | 14.4542 | NaN | C | NaN | 328.0 | NaN | . 1305 3 | 0 | Zabour, Miss. Thamine | female | NaN | 1 | 0 | 2665 | 14.4542 | NaN | C | NaN | NaN | NaN | . 1306 3 | 0 | Zakarian, Mr. Mapriededer | male | 26.5000 | 0 | 0 | 2656 | 7.2250 | NaN | C | NaN | 304.0 | NaN | . 1307 3 | 0 | Zakarian, Mr. Ortin | male | 27.0000 | 0 | 0 | 2670 | 7.2250 | NaN | C | NaN | NaN | NaN | . 1308 3 | 0 | Zimmerman, Mr. Leo | male | 29.0000 | 0 | 0 | 315082 | 7.8750 | NaN | S | NaN | NaN | NaN | . 1309 rows × 14 columns . from collections import Counter c = Counter() def triples(val): for i in range(len(val)): c[val[i : i + 3]] += 1 df.name.apply(triples) c.most_common(10) . [(&#39;, M&#39;, 1282), (&#39; Mr&#39;, 954), (&#39;r. &#39;, 830), (&#39;Mr.&#39;, 757), (&#39;s. &#39;, 460), (&#39;n, &#39;, 320), (&#39; Mi&#39;, 283), (&#39;iss&#39;, 261), (&#39;ss.&#39;, 261), (&#39;Mis&#39;, 260)] . df.name.str.extract( &quot;([A-Za-z]+) .&quot;, expand=False ).head() . 0 Miss 1 Master 2 Miss 3 Mr 4 Mrs Name: name, dtype: object . df.name.str.extract( &quot;([A-Za-z]+) .&quot;, expand=False ).value_counts() . Mr 757 Miss 260 Mrs 197 Master 61 Dr 8 Rev 8 Col 4 Ms 2 Mlle 2 Major 2 Mme 1 Dona 1 Don 1 Countess 1 Sir 1 Lady 1 Jonkheer 1 Capt 1 Name: name, dtype: int64 . 7.7 &#44536; &#48150;&#51032; &#48276;&#51452;&#54805; &#51064;&#53076;&#46377; . import category_encoders as ce he = ce.HashingEncoder(verbose=1) he.fit_transform(X_cat) . col_0 col_1 col_2 col_3 col_4 col_5 col_6 col_7 . 0 0 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | . 1 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | . size_df = pd.DataFrame( { &quot;name&quot;: [&quot;Fred&quot;, &quot;John&quot;, &quot;Matt&quot;], &quot;size&quot;: [&quot;small&quot;, &quot;med&quot;, &quot;xxl&quot;], } ) ore = ce.OrdinalEncoder( mapping=[ { &quot;col&quot;: &quot;size&quot;, &quot;mapping&quot;: { &quot;small&quot;: 1, &quot;med&quot;: 2, &quot;lg&quot;: 3 } } ] ) ore.fit_transform(size_df) . name size . 0 Fred | 1.0 | . 1 John | 2.0 | . 2 Matt | -1.0 | . def get_title(df): return df.name.str.extract( &quot;([A-Za-z]+) .&quot;, expand=False ) te = ce.TargetEncoder(cols=&quot;Title&quot;) te.fit_transform( df.assign(Title=get_title), df.survived)[&quot;Title&quot;].head() . 0 0.676923 1 0.508197 2 0.676923 3 0.162483 4 0.786802 Name: Title, dtype: float64 . 7.8 &#45216;&#51676;&#54805; &#45936;&#51060;&#53552;&#51032; &#53945;&#51669; &#44277;&#54617; . import numpy as np dates = pd.DataFrame( { &quot;A&quot;: pd.to_datetime( [&quot;9/17/2001&quot;, &quot;Jan 1, 2002&quot;] ) } ) add_datepart(dates, &quot;A&quot;) dates.T . 0 1 . AYear 2001 | 2002 | . AMonth 9 | 1 | . AWeek 38 | 1 | . ADay 17 | 1 | . ADayofweek 0 | 1 | . ADayofyear 260 | 1 | . AIs_month_end False | False | . AIs_month_start False | True | . AIs_quarter_end False | False | . AIs_quarter_start False | True | . AIs_year_end False | False | . AIs_year_start False | True | . AElapsed 1000684800 | 1009843200 | . 7.9 col_na &#53945;&#51669;&#51032; &#52628;&#44032; . from pandas.api.types import is_numeric_dtype def fix_missing(df, col, name, na_dict): if is_numeric_dtype(col): if pd.isnull(col).sum() or (name in na_dict): df[name + &quot;_na&quot;] = pd.isnull(col) filler = ( na_dict[name] if name in na_dict else col.median() ) df[name] = col.fillna(filler) na_dict[name] = filler return na_dict data = pd.DataFrame({&quot;A&quot;: [0, None, 5, 100]}) fix_missing(data, data.A, &quot;A&quot;, {}) . {&#39;A&#39;: 5.0} . from pandas.api.types import is_numeric_dtype def fix_missing(df, col, name, na_dict): if is_numeric_dtype(col): if pd.isnull(col).sum() or (name in na_dict): df[name + &quot;_na&quot;] = pd.isnull(col) filler = ( na_dict[name] if name in na_dict else col.median() ) df[name] = col.fillna(filler) na_dict[name] = filler return na_dict data = pd.DataFrame({&quot;A&quot;: [0, None, 5, 100]}) fix_missing(data, data.A, &quot;A&quot;, {}) . {&#39;A&#39;: 5.0} . data . A A_na . 0 0.0 | False | . 1 5.0 | True | . 2 5.0 | False | . 3 100.0 | False | . data = pd.DataFrame({&quot;A&quot;: [0, None, 5, 100]}) data[&quot;A_na&quot;] = data.A.isnull() data[&quot;A&quot;] = data.A.fillna(data.A.median()) . 7.10 &#49688;&#46041;&#51201; &#53945;&#51669; &#44277;&#54617; . agg = ( df.groupby(&quot;cabin&quot;) .agg(&quot;min,max,mean,sum&quot;.split(&quot;,&quot;)) .reset_index() ) agg.columns = [ &quot;_&quot;.join(c).strip(&quot;_&quot;) for c in agg.columns.values ] agg_df = df.merge(agg, on=&quot;cabin&quot;) agg_df . pclass survived name sex age sibsp parch ticket fare cabin embarked boat body home.dest pclass_min pclass_max pclass_mean pclass_sum survived_min survived_max survived_mean survived_sum age_min age_max age_mean age_sum sibsp_min sibsp_max sibsp_mean sibsp_sum parch_min parch_max parch_mean parch_sum fare_min fare_max fare_mean fare_sum body_min body_max body_mean body_sum . 0 1 | 1 | Allen, Miss. Elisabeth Walton | female | 29.0000 | 0 | 0 | 24160 | 211.3375 | B5 | S | 2 | NaN | St Louis, MO | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 15.0000 | 29.0 | 22.000000 | 44.0000 | 0 | 0 | 0.000000 | 0 | 0 | 1 | 0.5 | 1 | 211.3375 | 211.3375 | 211.337500 | 422.6750 | NaN | NaN | NaN | 0.0 | . 1 1 | 1 | Madill, Miss. Georgette Alexandra | female | 15.0000 | 0 | 1 | 24160 | 211.3375 | B5 | S | 2 | NaN | St Louis, MO | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 15.0000 | 29.0 | 22.000000 | 44.0000 | 0 | 0 | 0.000000 | 0 | 0 | 1 | 0.5 | 1 | 211.3375 | 211.3375 | 211.337500 | 422.6750 | NaN | NaN | NaN | 0.0 | . 2 1 | 1 | Allison, Master. Hudson Trevor | male | 0.9167 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | 11 | NaN | Montreal, PQ / Chesterville, ON | 1 | 1 | 1 | 4 | 0 | 1 | 0.250000 | 1 | 0.9167 | 30.0 | 14.479175 | 57.9167 | 1 | 1 | 1.000000 | 4 | 2 | 2 | 2.0 | 8 | 151.5500 | 151.5500 | 151.550000 | 606.2000 | 135.0 | 135.0 | 135.0 | 135.0 | . 3 1 | 0 | Allison, Miss. Helen Loraine | female | 2.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | 1 | 1 | 1 | 4 | 0 | 1 | 0.250000 | 1 | 0.9167 | 30.0 | 14.479175 | 57.9167 | 1 | 1 | 1.000000 | 4 | 2 | 2 | 2.0 | 8 | 151.5500 | 151.5500 | 151.550000 | 606.2000 | 135.0 | 135.0 | 135.0 | 135.0 | . 4 1 | 0 | Allison, Mr. Hudson Joshua Creighton | male | 30.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | 135.0 | Montreal, PQ / Chesterville, ON | 1 | 1 | 1 | 4 | 0 | 1 | 0.250000 | 1 | 0.9167 | 30.0 | 14.479175 | 57.9167 | 1 | 1 | 1.000000 | 4 | 2 | 2 | 2.0 | 8 | 151.5500 | 151.5500 | 151.550000 | 606.2000 | 135.0 | 135.0 | 135.0 | 135.0 | . 5 1 | 0 | Allison, Mrs. Hudson J C (Bessie Waldo Daniels) | female | 25.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | 1 | 1 | 1 | 4 | 0 | 1 | 0.250000 | 1 | 0.9167 | 30.0 | 14.479175 | 57.9167 | 1 | 1 | 1.000000 | 4 | 2 | 2 | 2.0 | 8 | 151.5500 | 151.5500 | 151.550000 | 606.2000 | 135.0 | 135.0 | 135.0 | 135.0 | . 6 1 | 1 | Anderson, Mr. Harry | male | 48.0000 | 0 | 0 | 19952 | 26.5500 | E12 | S | 3 | NaN | New York, NY | 1 | 1 | 1 | 1 | 1 | 1 | 1.000000 | 1 | 48.0000 | 48.0 | 48.000000 | 48.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 26.5500 | 26.5500 | 26.550000 | 26.5500 | NaN | NaN | NaN | 0.0 | . 7 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.0000 | 1 | 0 | 13502 | 77.9583 | D7 | S | 10 | NaN | Hudson, NY | 1 | 1 | 1 | 1 | 1 | 1 | 1.000000 | 1 | 63.0000 | 63.0 | 63.000000 | 63.0000 | 1 | 1 | 1.000000 | 1 | 0 | 0 | 0.0 | 0 | 77.9583 | 77.9583 | 77.958300 | 77.9583 | NaN | NaN | NaN | 0.0 | . 8 1 | 0 | Andrews, Mr. Thomas Jr | male | 39.0000 | 0 | 0 | 112050 | 0.0000 | A36 | S | NaN | NaN | Belfast, NI | 1 | 1 | 1 | 1 | 0 | 0 | 0.000000 | 0 | 39.0000 | 39.0 | 39.000000 | 39.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 0.0000 | 0.0000 | 0.000000 | 0.0000 | NaN | NaN | NaN | 0.0 | . 9 1 | 1 | Appleton, Mrs. Edward Dale (Charlotte Lamson) | female | 53.0000 | 2 | 0 | 11769 | 51.4792 | C101 | S | D | NaN | Bayside, Queens, NY | 1 | 1 | 1 | 3 | 1 | 1 | 1.000000 | 3 | 53.0000 | 59.0 | 55.666667 | 167.0000 | 2 | 2 | 2.000000 | 6 | 0 | 0 | 0.0 | 0 | 25.7000 | 51.4792 | 42.886133 | 128.6584 | NaN | NaN | NaN | 0.0 | . 10 1 | 1 | Brown, Mrs. John Murray (Caroline Lane Lamson) | female | 59.0000 | 2 | 0 | 11769 | 51.4792 | C101 | S | D | NaN | Belmont, MA | 1 | 1 | 1 | 3 | 1 | 1 | 1.000000 | 3 | 53.0000 | 59.0 | 55.666667 | 167.0000 | 2 | 2 | 2.000000 | 6 | 0 | 0 | 0.0 | 0 | 25.7000 | 51.4792 | 42.886133 | 128.6584 | NaN | NaN | NaN | 0.0 | . 11 1 | 1 | Cornell, Mrs. Robert Clifford (Malvina Helen L... | female | 55.0000 | 2 | 0 | 11770 | 25.7000 | C101 | S | 2 | NaN | New York, NY | 1 | 1 | 1 | 3 | 1 | 1 | 1.000000 | 3 | 53.0000 | 59.0 | 55.666667 | 167.0000 | 2 | 2 | 2.000000 | 6 | 0 | 0 | 0.0 | 0 | 25.7000 | 51.4792 | 42.886133 | 128.6584 | NaN | NaN | NaN | 0.0 | . 12 1 | 0 | Astor, Col. John Jacob | male | 47.0000 | 1 | 0 | PC 17757 | 227.5250 | C62 C64 | C | NaN | 124.0 | New York, NY | 1 | 1 | 1 | 2 | 0 | 1 | 0.500000 | 1 | 18.0000 | 47.0 | 32.500000 | 65.0000 | 1 | 1 | 1.000000 | 2 | 0 | 0 | 0.0 | 0 | 227.5250 | 227.5250 | 227.525000 | 455.0500 | 124.0 | 124.0 | 124.0 | 124.0 | . 13 1 | 1 | Astor, Mrs. John Jacob (Madeleine Talmadge Force) | female | 18.0000 | 1 | 0 | PC 17757 | 227.5250 | C62 C64 | C | 4 | NaN | New York, NY | 1 | 1 | 1 | 2 | 0 | 1 | 0.500000 | 1 | 18.0000 | 47.0 | 32.500000 | 65.0000 | 1 | 1 | 1.000000 | 2 | 0 | 0 | 0.0 | 0 | 227.5250 | 227.5250 | 227.525000 | 455.0500 | 124.0 | 124.0 | 124.0 | 124.0 | . 14 1 | 1 | Aubart, Mme. Leontine Pauline | female | 24.0000 | 0 | 0 | PC 17477 | 69.3000 | B35 | C | 9 | NaN | Paris, France | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 24.0000 | 24.0 | 24.000000 | 48.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 69.3000 | 69.3000 | 69.300000 | 138.6000 | NaN | NaN | NaN | 0.0 | . 15 1 | 1 | Sagesser, Mlle. Emma | female | 24.0000 | 0 | 0 | PC 17477 | 69.3000 | B35 | C | 9 | NaN | NaN | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 24.0000 | 24.0 | 24.000000 | 48.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 69.3000 | 69.3000 | 69.300000 | 138.6000 | NaN | NaN | NaN | 0.0 | . 16 1 | 1 | Barkworth, Mr. Algernon Henry Wilson | male | 80.0000 | 0 | 0 | 27042 | 30.0000 | A23 | S | B | NaN | Hessle, Yorks | 1 | 1 | 1 | 1 | 1 | 1 | 1.000000 | 1 | 80.0000 | 80.0 | 80.000000 | 80.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 30.0000 | 30.0000 | 30.000000 | 30.0000 | NaN | NaN | NaN | 0.0 | . 17 1 | 0 | Baxter, Mr. Quigg Edmond | male | 24.0000 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | NaN | NaN | Montreal, PQ | 1 | 1 | 1 | 3 | 0 | 1 | 0.666667 | 2 | 24.0000 | 50.0 | 33.666667 | 101.0000 | 0 | 1 | 0.333333 | 1 | 1 | 1 | 1.0 | 3 | 247.5208 | 247.5208 | 247.520800 | 742.5624 | NaN | NaN | NaN | 0.0 | . 18 1 | 1 | Baxter, Mrs. James (Helene DeLaudeniere Chaput) | female | 50.0000 | 0 | 1 | PC 17558 | 247.5208 | B58 B60 | C | 6 | NaN | Montreal, PQ | 1 | 1 | 1 | 3 | 0 | 1 | 0.666667 | 2 | 24.0000 | 50.0 | 33.666667 | 101.0000 | 0 | 1 | 0.333333 | 1 | 1 | 1 | 1.0 | 3 | 247.5208 | 247.5208 | 247.520800 | 742.5624 | NaN | NaN | NaN | 0.0 | . 19 1 | 1 | Douglas, Mrs. Frederick Charles (Mary Helene B... | female | 27.0000 | 1 | 1 | PC 17558 | 247.5208 | B58 B60 | C | 6 | NaN | Montreal, PQ | 1 | 1 | 1 | 3 | 0 | 1 | 0.666667 | 2 | 24.0000 | 50.0 | 33.666667 | 101.0000 | 0 | 1 | 0.333333 | 1 | 1 | 1 | 1.0 | 3 | 247.5208 | 247.5208 | 247.520800 | 742.5624 | NaN | NaN | NaN | 0.0 | . 20 1 | 1 | Bazzani, Miss. Albina | female | 32.0000 | 0 | 0 | 11813 | 76.2917 | D15 | C | 8 | NaN | NaN | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 32.0000 | 60.0 | 46.000000 | 92.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 76.2917 | 76.2917 | 76.291700 | 152.5834 | NaN | NaN | NaN | 0.0 | . 21 1 | 1 | Bucknell, Mrs. William Robert (Emma Eliza Ward) | female | 60.0000 | 0 | 0 | 11813 | 76.2917 | D15 | C | 8 | NaN | Philadelphia, PA | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 32.0000 | 60.0 | 46.000000 | 92.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 76.2917 | 76.2917 | 76.291700 | 152.5834 | NaN | NaN | NaN | 0.0 | . 22 1 | 0 | Beattie, Mr. Thomson | male | 36.0000 | 0 | 0 | 13050 | 75.2417 | C6 | C | A | NaN | Winnipeg, MN | 1 | 1 | 1 | 2 | 0 | 0 | 0.000000 | 0 | 36.0000 | 46.0 | 41.000000 | 82.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 75.2417 | 75.2417 | 75.241700 | 150.4834 | 292.0 | 292.0 | 292.0 | 292.0 | . 23 1 | 0 | McCaffry, Mr. Thomas Francis | male | 46.0000 | 0 | 0 | 13050 | 75.2417 | C6 | C | NaN | 292.0 | Vancouver, BC | 1 | 1 | 1 | 2 | 0 | 0 | 0.000000 | 0 | 36.0000 | 46.0 | 41.000000 | 82.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 75.2417 | 75.2417 | 75.241700 | 150.4834 | 292.0 | 292.0 | 292.0 | 292.0 | . 24 1 | 1 | Beckwith, Mr. Richard Leonard | male | 37.0000 | 1 | 1 | 11751 | 52.5542 | D35 | S | 5 | NaN | New York, NY | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 37.0000 | 47.0 | 42.000000 | 84.0000 | 1 | 1 | 1.000000 | 2 | 1 | 1 | 1.0 | 2 | 52.5542 | 52.5542 | 52.554200 | 105.1084 | NaN | NaN | NaN | 0.0 | . 25 1 | 1 | Beckwith, Mrs. Richard Leonard (Sallie Monypeny) | female | 47.0000 | 1 | 1 | 11751 | 52.5542 | D35 | S | 5 | NaN | New York, NY | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 37.0000 | 47.0 | 42.000000 | 84.0000 | 1 | 1 | 1.000000 | 2 | 1 | 1 | 1.0 | 2 | 52.5542 | 52.5542 | 52.554200 | 105.1084 | NaN | NaN | NaN | 0.0 | . 26 1 | 1 | Behr, Mr. Karl Howell | male | 26.0000 | 0 | 0 | 111369 | 30.0000 | C148 | C | 5 | NaN | New York, NY | 1 | 1 | 1 | 1 | 1 | 1 | 1.000000 | 1 | 26.0000 | 26.0 | 26.000000 | 26.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 30.0000 | 30.0000 | 30.000000 | 30.0000 | NaN | NaN | NaN | 0.0 | . 27 1 | 1 | Bird, Miss. Ellen | female | 29.0000 | 0 | 0 | PC 17483 | 221.7792 | C97 | S | 8 | NaN | NaN | 1 | 1 | 1 | 1 | 1 | 1 | 1.000000 | 1 | 29.0000 | 29.0 | 29.000000 | 29.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 221.7792 | 221.7792 | 221.779200 | 221.7792 | NaN | NaN | NaN | 0.0 | . 28 1 | 1 | Bishop, Mr. Dickinson H | male | 25.0000 | 1 | 0 | 11967 | 91.0792 | B49 | C | 7 | NaN | Dowagiac, MI | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 19.0000 | 25.0 | 22.000000 | 44.0000 | 1 | 1 | 1.000000 | 2 | 0 | 0 | 0.0 | 0 | 91.0792 | 91.0792 | 91.079200 | 182.1584 | NaN | NaN | NaN | 0.0 | . 29 1 | 1 | Bishop, Mrs. Dickinson H (Helen Walton) | female | 19.0000 | 1 | 0 | 11967 | 91.0792 | B49 | C | 7 | NaN | Dowagiac, MI | 1 | 1 | 1 | 2 | 1 | 1 | 1.000000 | 2 | 19.0000 | 25.0 | 22.000000 | 44.0000 | 1 | 1 | 1.000000 | 2 | 0 | 0 | 0.0 | 0 | 91.0792 | 91.0792 | 91.079200 | 182.1584 | NaN | NaN | NaN | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 265 2 | 1 | Brown, Miss. Amelia &quot;Mildred&quot; | female | 24.0000 | 0 | 0 | 248733 | 13.0000 | F33 | S | 11 | NaN | London / Montreal, PQ | 2 | 2 | 2 | 8 | 1 | 1 | 1.000000 | 4 | 22.0000 | 34.0 | 27.250000 | 109.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.125000 | 44.5000 | NaN | NaN | NaN | 0.0 | . 266 2 | 1 | Cook, Mrs. (Selena Rogers) | female | 22.0000 | 0 | 0 | W./C. 14266 | 10.5000 | F33 | S | 14 | NaN | Pennsylvania | 2 | 2 | 2 | 8 | 1 | 1 | 1.000000 | 4 | 22.0000 | 34.0 | 27.250000 | 109.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.125000 | 44.5000 | NaN | NaN | NaN | 0.0 | . 267 2 | 1 | Lemore, Mrs. (Amelia Milley) | female | 34.0000 | 0 | 0 | C.A. 34260 | 10.5000 | F33 | S | 14 | NaN | Chicago, IL | 2 | 2 | 2 | 8 | 1 | 1 | 1.000000 | 4 | 22.0000 | 34.0 | 27.250000 | 109.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.125000 | 44.5000 | NaN | NaN | NaN | 0.0 | . 268 2 | 1 | Nye, Mrs. (Elizabeth Ramell) | female | 29.0000 | 0 | 0 | C.A. 29395 | 10.5000 | F33 | S | 11 | NaN | Folkstone, Kent / New York, NY | 2 | 2 | 2 | 8 | 1 | 1 | 1.000000 | 4 | 22.0000 | 34.0 | 27.250000 | 109.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.125000 | 44.5000 | NaN | NaN | NaN | 0.0 | . 269 2 | 1 | Keane, Miss. Nora A | female | NaN | 0 | 0 | 226593 | 12.3500 | E101 | Q | 10 | NaN | Harrisburg, PA | 2 | 2 | 2 | 6 | 1 | 1 | 1.000000 | 3 | 27.0000 | 32.5 | 29.750000 | 59.5000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.950000 | 35.8500 | NaN | NaN | NaN | 0.0 | . 270 2 | 1 | Troutt, Miss. Edwina Celia &quot;Winnie&quot; | female | 27.0000 | 0 | 0 | 34218 | 10.5000 | E101 | S | 16 | NaN | Bath, England / Massachusetts | 2 | 2 | 2 | 6 | 1 | 1 | 1.000000 | 3 | 27.0000 | 32.5 | 29.750000 | 59.5000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.950000 | 35.8500 | NaN | NaN | NaN | 0.0 | . 271 2 | 1 | Webber, Miss. Susan | female | 32.5000 | 0 | 0 | 27267 | 13.0000 | E101 | S | 12 | NaN | England / Hartford, CT | 2 | 2 | 2 | 6 | 1 | 1 | 1.000000 | 3 | 27.0000 | 32.5 | 29.750000 | 59.5000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 13.0000 | 11.950000 | 35.8500 | NaN | NaN | NaN | 0.0 | . 272 2 | 0 | Mack, Mrs. (Mary) | female | 57.0000 | 0 | 0 | S.O./P.P. 3 | 10.5000 | E77 | S | NaN | 52.0 | Southampton / New York, NY | 2 | 2 | 2 | 2 | 0 | 0 | 0.000000 | 0 | 57.0000 | 57.0 | 57.000000 | 57.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 10.5000 | 10.5000 | 10.500000 | 10.5000 | 52.0 | 52.0 | 52.0 | 52.0 | . 273 2 | 1 | Navratil, Master. Edmond Roger | male | 2.0000 | 1 | 1 | 230080 | 26.0000 | F2 | S | D | NaN | Nice, France | 2 | 2 | 2 | 8 | 0 | 1 | 0.500000 | 2 | 2.0000 | 36.5 | 16.875000 | 67.5000 | 0 | 1 | 0.500000 | 2 | 0 | 2 | 1.0 | 4 | 13.0000 | 26.0000 | 22.750000 | 91.0000 | 15.0 | 15.0 | 15.0 | 15.0 | . 274 2 | 1 | Navratil, Master. Michel M | male | 3.0000 | 1 | 1 | 230080 | 26.0000 | F2 | S | D | NaN | Nice, France | 2 | 2 | 2 | 8 | 0 | 1 | 0.500000 | 2 | 2.0000 | 36.5 | 16.875000 | 67.5000 | 0 | 1 | 0.500000 | 2 | 0 | 2 | 1.0 | 4 | 13.0000 | 26.0000 | 22.750000 | 91.0000 | 15.0 | 15.0 | 15.0 | 15.0 | . 275 2 | 0 | Navratil, Mr. Michel (&quot;Louis M Hoffman&quot;) | male | 36.5000 | 0 | 2 | 230080 | 26.0000 | F2 | S | NaN | 15.0 | Nice, France | 2 | 2 | 2 | 8 | 0 | 1 | 0.500000 | 2 | 2.0000 | 36.5 | 16.875000 | 67.5000 | 0 | 1 | 0.500000 | 2 | 0 | 2 | 1.0 | 4 | 13.0000 | 26.0000 | 22.750000 | 91.0000 | 15.0 | 15.0 | 15.0 | 15.0 | . 276 2 | 0 | Nesson, Mr. Israel | male | 26.0000 | 0 | 0 | 244368 | 13.0000 | F2 | S | NaN | NaN | Boston, MA | 2 | 2 | 2 | 8 | 0 | 1 | 0.500000 | 2 | 2.0000 | 36.5 | 16.875000 | 67.5000 | 0 | 1 | 0.500000 | 2 | 0 | 2 | 1.0 | 4 | 13.0000 | 26.0000 | 22.750000 | 91.0000 | 15.0 | 15.0 | 15.0 | 15.0 | . 277 2 | 1 | Nourney, Mr. Alfred (&quot;Baron von Drachstedt&quot;) | male | 20.0000 | 0 | 0 | SC/PARIS 2166 | 13.8625 | D38 | C | 7 | NaN | Cologne, Germany | 2 | 2 | 2 | 2 | 1 | 1 | 1.000000 | 1 | 20.0000 | 20.0 | 20.000000 | 20.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 13.8625 | 13.8625 | 13.862500 | 13.8625 | NaN | NaN | NaN | 0.0 | . 278 2 | 0 | Swane, Mr. George | male | 18.5000 | 0 | 0 | 248734 | 13.0000 | F | S | NaN | 294.0 | NaN | 2 | 2 | 2 | 2 | 0 | 0 | 0.000000 | 0 | 18.5000 | 18.5 | 18.500000 | 18.5000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 13.0000 | 13.0000 | 13.000000 | 13.0000 | 294.0 | 294.0 | 294.0 | 294.0 | . 279 3 | 1 | Abelseth, Mr. Olaus Jorgensen | male | 25.0000 | 0 | 0 | 348122 | 7.6500 | F G63 | S | A | NaN | Perkins County, SD | 3 | 3 | 3 | 6 | 0 | 1 | 0.500000 | 1 | 25.0000 | 42.0 | 33.500000 | 67.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.6500 | 7.6500 | 7.650000 | 15.3000 | 120.0 | 120.0 | 120.0 | 120.0 | . 280 3 | 0 | Humblen, Mr. Adolf Mathias Nicolai Olsen | male | 42.0000 | 0 | 0 | 348121 | 7.6500 | F G63 | S | NaN | 120.0 | NaN | 3 | 3 | 3 | 6 | 0 | 1 | 0.500000 | 1 | 25.0000 | 42.0 | 33.500000 | 67.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.6500 | 7.6500 | 7.650000 | 15.3000 | 120.0 | 120.0 | 120.0 | 120.0 | . 281 3 | 1 | Krekorian, Mr. Neshan | male | 25.0000 | 0 | 0 | 2654 | 7.2292 | F E57 | C | 10 | NaN | NaN | 3 | 3 | 3 | 3 | 1 | 1 | 1.000000 | 1 | 25.0000 | 25.0 | 25.000000 | 25.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.2292 | 7.2292 | 7.229200 | 7.2292 | NaN | NaN | NaN | 0.0 | . 282 3 | 0 | Mardirosian, Mr. Sarkis | male | NaN | 0 | 0 | 2655 | 7.2292 | F E46 | C | NaN | NaN | NaN | 3 | 3 | 3 | 3 | 0 | 0 | 0.000000 | 0 | NaN | NaN | NaN | 0.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.2292 | 7.2292 | 7.229200 | 7.2292 | NaN | NaN | NaN | 0.0 | . 283 3 | 0 | Moen, Mr. Sigurd Hansen | male | 25.0000 | 0 | 0 | 348123 | 7.6500 | F G73 | S | NaN | 309.0 | NaN | 3 | 3 | 3 | 6 | 0 | 0 | 0.000000 | 0 | 19.0000 | 25.0 | 22.000000 | 44.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.6500 | 7.6500 | 7.650000 | 15.3000 | 309.0 | 309.0 | 309.0 | 309.0 | . 284 3 | 0 | Soholt, Mr. Peter Andreas Lauritz Andersen | male | 19.0000 | 0 | 0 | 348124 | 7.6500 | F G73 | S | NaN | NaN | NaN | 3 | 3 | 3 | 6 | 0 | 0 | 0.000000 | 0 | 19.0000 | 25.0 | 22.000000 | 44.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.6500 | 7.6500 | 7.650000 | 15.3000 | 309.0 | 309.0 | 309.0 | 309.0 | . 285 3 | 1 | Moor, Master. Meier | male | 6.0000 | 0 | 1 | 392096 | 12.4750 | E121 | S | 14 | NaN | NaN | 3 | 3 | 3 | 6 | 1 | 1 | 1.000000 | 2 | 6.0000 | 27.0 | 16.500000 | 33.0000 | 0 | 0 | 0.000000 | 0 | 1 | 1 | 1.0 | 2 | 12.4750 | 12.4750 | 12.475000 | 24.9500 | NaN | NaN | NaN | 0.0 | . 286 3 | 1 | Moor, Mrs. (Beila) | female | 27.0000 | 0 | 1 | 392096 | 12.4750 | E121 | S | 14 | NaN | NaN | 3 | 3 | 3 | 6 | 1 | 1 | 1.000000 | 2 | 6.0000 | 27.0 | 16.500000 | 33.0000 | 0 | 0 | 0.000000 | 0 | 1 | 1 | 1.0 | 2 | 12.4750 | 12.4750 | 12.475000 | 24.9500 | NaN | NaN | NaN | 0.0 | . 287 3 | 1 | Peter, Miss. Anna | female | NaN | 1 | 1 | 2668 | 22.3583 | F E69 | C | D | NaN | NaN | 3 | 3 | 3 | 3 | 1 | 1 | 1.000000 | 1 | NaN | NaN | NaN | 0.0000 | 1 | 1 | 1.000000 | 1 | 1 | 1 | 1.0 | 1 | 22.3583 | 22.3583 | 22.358300 | 22.3583 | NaN | NaN | NaN | 0.0 | . 288 3 | 1 | Pickard, Mr. Berk (Berk Trembisky) | male | 32.0000 | 0 | 0 | SOTON/O.Q. 392078 | 8.0500 | E10 | S | 9 | NaN | NaN | 3 | 3 | 3 | 3 | 1 | 1 | 1.000000 | 1 | 32.0000 | 32.0 | 32.000000 | 32.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 8.0500 | 8.0500 | 8.050000 | 8.0500 | NaN | NaN | NaN | 0.0 | . 289 3 | 1 | Sandstrom, Miss. Beatrice Irene | female | 1.0000 | 1 | 1 | PP 9549 | 16.7000 | G6 | S | 13 | NaN | NaN | 3 | 3 | 3 | 15 | 0 | 1 | 0.600000 | 3 | 1.0000 | 29.0 | 12.000000 | 60.0000 | 0 | 1 | 0.600000 | 3 | 1 | 2 | 1.2 | 6 | 10.4625 | 16.7000 | 14.205000 | 71.0250 | NaN | NaN | NaN | 0.0 | . 290 3 | 1 | Sandstrom, Mrs. Hjalmar (Agnes Charlotta Bengt... | female | 24.0000 | 0 | 2 | PP 9549 | 16.7000 | G6 | S | 13 | NaN | NaN | 3 | 3 | 3 | 15 | 0 | 1 | 0.600000 | 3 | 1.0000 | 29.0 | 12.000000 | 60.0000 | 0 | 1 | 0.600000 | 3 | 1 | 2 | 1.2 | 6 | 10.4625 | 16.7000 | 14.205000 | 71.0250 | NaN | NaN | NaN | 0.0 | . 291 3 | 1 | Sandstrom, Miss. Marguerite Rut | female | 4.0000 | 1 | 1 | PP 9549 | 16.7000 | G6 | S | 13 | NaN | NaN | 3 | 3 | 3 | 15 | 0 | 1 | 0.600000 | 3 | 1.0000 | 29.0 | 12.000000 | 60.0000 | 0 | 1 | 0.600000 | 3 | 1 | 2 | 1.2 | 6 | 10.4625 | 16.7000 | 14.205000 | 71.0250 | NaN | NaN | NaN | 0.0 | . 292 3 | 0 | Strom, Miss. Telma Matilda | female | 2.0000 | 0 | 1 | 347054 | 10.4625 | G6 | S | NaN | NaN | NaN | 3 | 3 | 3 | 15 | 0 | 1 | 0.600000 | 3 | 1.0000 | 29.0 | 12.000000 | 60.0000 | 0 | 1 | 0.600000 | 3 | 1 | 2 | 1.2 | 6 | 10.4625 | 16.7000 | 14.205000 | 71.0250 | NaN | NaN | NaN | 0.0 | . 293 3 | 0 | Strom, Mrs. Wilhelm (Elna Matilda Persson) | female | 29.0000 | 1 | 1 | 347054 | 10.4625 | G6 | S | NaN | NaN | NaN | 3 | 3 | 3 | 15 | 0 | 1 | 0.600000 | 3 | 1.0000 | 29.0 | 12.000000 | 60.0000 | 0 | 1 | 0.600000 | 3 | 1 | 2 | 1.2 | 6 | 10.4625 | 16.7000 | 14.205000 | 71.0250 | NaN | NaN | NaN | 0.0 | . 294 3 | 0 | Tobin, Mr. Roger | male | NaN | 0 | 0 | 383121 | 7.7500 | F38 | Q | NaN | NaN | NaN | 3 | 3 | 3 | 3 | 0 | 0 | 0.000000 | 0 | NaN | NaN | NaN | 0.0000 | 0 | 0 | 0.000000 | 0 | 0 | 0 | 0.0 | 0 | 7.7500 | 7.7500 | 7.750000 | 7.7500 | NaN | NaN | NaN | 0.0 | . 295 rows × 42 columns .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter7/",
            "relUrl": "/chapter7/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "6장 탐색",
            "content": "6.1 &#45936;&#51060;&#53552;&#51032; &#53356;&#44592; . X.shape . (1309, 8) . 6.2 &#50836;&#50557; &#53685;&#44228; . X.describe().iloc[:, [0, -1]] . pclass embarked_S . count 1309.000000 | 1309.000000 | . mean -0.012831 | 0.698243 | . std 0.995822 | 0.459196 | . min -1.551881 | 0.000000 | . 25% -0.363317 | 0.000000 | . 50% 0.825248 | 1.000000 | . 75% 0.825248 | 1.000000 | . max 0.825248 | 1.000000 | . 6.3 &#55176;&#49828;&#53664;&#44536;&#47016; . fig, ax = plt.subplots(figsize=(6, 4)) X.fare.plot(kind=&quot;hist&quot;, ax=ax) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd70c5eae10&gt; . import seaborn as sns fig, ax = plt.subplots(figsize=(12, 8)) mask = y_train == 1 ax = sns.distplot(X_train[mask].fare, label=&#39;survived&#39;) ax = sns.distplot(X_train[~mask].fare, label=&#39;died&#39;) ax.set_xlim(-1.5, 1.5) ax.legend() . &lt;matplotlib.legend.Legend at 0x7fd70c5eaa10&gt; . 6.4 &#49328;&#51216;&#46020; . fig, ax = plt.subplots(figsize=(6, 4)) X.plot.scatter(x=&quot;age&quot;, y=&quot;fare&quot;, ax=ax, alpha=0.3) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd6face1d10&gt; . X.age.corr(X.fare) . 0.1771997483998958 . 6.5 &#51312;&#51064;&#53944; &#54540;&#47215; . from yellowbrick.features import ( JointPlotVisualizer, ) fig, ax = plt.subplots(figsize=(6, 6)) jpv = JointPlotVisualizer(feature=&quot;age&quot;, target=&quot;fare&quot;) jpv.fit(X[&quot;age&quot;], X[&quot;fare&quot;]) jpv.poof() . from seaborn import jointplot fig, ax = plt.subplots(figsize=(6, 6)) new_df = X.copy() new_df[&quot;target&quot;] = y p = jointplot(&quot;age&quot;, &quot;fare&quot;, data=new_df, kind=&quot;reg&quot;) . 6.6 &#49933; &#44201;&#51088; . from seaborn import pairplot fig, ax = plt.subplots(figsize=(6, 6)) new_df = X.copy() new_df[&quot;target&quot;] = y vars = [&quot;pclass&quot;, &quot;age&quot;, &quot;fare&quot;] p = pairplot(new_df, vars=vars, hue=&quot;target&quot;, kind=&quot;reg&quot;) . 6.7 &#48149;&#49828; &#54540;&#47215;&#44284; &#48148;&#51060;&#50732;&#47536; &#54540;&#47215; . from seaborn import boxplot fig, ax = plt.subplots(figsize=(8, 6)) new_df = X.copy() new_df[&quot;target&quot;] = y boxplot(x=&quot;target&quot;, y=&quot;age&quot;, data=new_df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd6fbbe6810&gt; . from seaborn import violinplot fig, ax = plt.subplots(figsize=(8, 6)) new_df = X.copy() new_df[&quot;target&quot;] = y violinplot(x=&quot;target&quot;, y=&quot;sex_male&quot;, data=new_df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd6fbb7d910&gt; . 6.8 &#46160; &#49692;&#49436;&#54805; &#44050;&#51032; &#48708;&#44368; . fig, ax = plt.subplots(figsize=(8, 6)) ( X.assign( age_bin=pd.qcut(X.age, q=10, labels=False), class_bin=pd.cut(X.pclass, bins=3, labels=False), ) .groupby([&quot;age_bin&quot;, &quot;class_bin&quot;]) .size() .unstack() .pipe(lambda df: df.div(df.sum(1), axis=0)) .plot.bar(stacked=True, width=1, ax=ax, cmap=&quot;viridis&quot;) .legend(bbox_to_anchor=(1, 1)) ) . &lt;matplotlib.legend.Legend at 0x7fd6faa4c610&gt; . 6.9 &#49345;&#44288;&#44288;&#44228; . from yellowbrick.features import Rank2D fig, ax = plt.subplots(figsize=(6, 6)) pcv = Rank2D(features=X.columns, algorithm=&quot;pearson&quot;) pcv.fit(X, y) pcv.transform(X) pcv.poof() . from seaborn import heatmap fig, ax = plt.subplots(figsize=(8, 8)) ax = heatmap( X.corr(), fmt=&quot;.2f&quot;, annot=True, ax=ax, cmap=&quot;RdBu_r&quot;, vmin=-1, vmax=1, ) . X.corr().iloc[:, :2] . pclass age . pclass 1.000000 | -0.439704 | . age -0.439704 | 1.000000 | . sibsp 0.060832 | -0.292056 | . parch 0.018322 | -0.176447 | . fare -0.558827 | 0.177200 | . sex_male 0.124617 | 0.065004 | . embarked_Q 0.230491 | -0.053904 | . embarked_S 0.096335 | -0.045361 | . import numpy as np def correlated_columns(df, threshold=0.95): return ( df.corr().pipe( lambda df1: pd.DataFrame( np.tril(df1, k=-1), columns=df.columns, index=df.columns ) ) .stack() .rename(&quot;pearson&quot;) .pipe( lambda s: s[ s.abs() &gt; threshold ].reset_index() ) .query(&quot;level_0 not in level_1&quot;) ) correlated_columns(X) . level_0 level_1 pearson . 6.10 &#46972;&#46300;&#48708;&#51592; . from yellowbrick.features import RadViz fig, ax = plt.subplots(figsize=(6, 6)) rv = RadViz( classes=[&quot;died&quot;, &quot;survived&quot;], features=X.columns, ) rv.fit(X, y) _ = rv.transform(X) rv.poof() . from pandas.plotting import radviz fig, ax = plt.subplots(figsize=(6, 6)) new_df = X.copy() new_df[&quot;target&quot;] = y radviz(new_df, &quot;target&quot;, ax=ax, colormap=&quot;PiYG&quot;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fd6fa9b63d0&gt; . 6.11 &#54217;&#54665; &#51340;&#54364; . from yellowbrick.features import ( ParallelCoordinates, ) fig, ax = plt.subplots(figsize=(6, 4)) pc = ParallelCoordinates( classes=[&quot;died&quot;, &quot;survived&quot;], features=X.columns, ) pc.fit(X, y) pc.transform(X) ax.set_xticklabels( ax.get_xticklabels(), rotation=45 ) pc.poof() . from pandas.plotting import ( parallel_coordinates, ) fig, ax = plt.subplots(figsize=(6, 4)) new_df = X.copy() new_df[&quot;target&quot;] = y parallel_coordinates( new_df, &quot;target&quot;, ax=ax, colormap=&quot;viridis&quot;, alpha=0.5, ) ax.set_xticklabels( ax.get_xticklabels(), rotation=45 ) . [Text(0,0,&#39;pclass&#39;), Text(0,0,&#39;age&#39;), Text(0,0,&#39;sibsp&#39;), Text(0,0,&#39;parch&#39;), Text(0,0,&#39;fare&#39;), Text(0,0,&#39;sex_male&#39;), Text(0,0,&#39;embarked_Q&#39;), Text(0,0,&#39;embarked_S&#39;)] .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter6/",
            "relUrl": "/chapter6/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "5장 데이터의 정리",
            "content": "&#54596;&#50836;&#54620; &#54056;&#53412;&#51648; . 5.1 &#50676;&#51032; &#51060;&#47492; . import janitor as jn Xbad = pd.DataFrame( { &quot;A&quot;: [1, None, 3], &quot; sales numbers &quot;: [20.0, 30.0, None], } ) jn.clean_names(Xbad) . a _sales_numbers_ . 0 1.0 | 20.0 | . 1 NaN | 30.0 | . 2 3.0 | NaN | . def clean_col(name): return ( name.strip().lower().replace(&quot; &quot;, &quot;_&quot;) ) Xbad.rename(columns=clean_col) . a sales_numbers . 0 1.0 | 20.0 | . 1 NaN | 30.0 | . 2 3.0 | NaN | . 5.2 &#45572;&#46973;&#46108; &#44050;&#51032; &#44368;&#52404; . jn.coalesce( Xbad, columns=[&quot;A&quot;, &quot; sales numbers &quot;], new_column_name=&quot;val&quot;, ) . val . 0 1.0 | . 1 30.0 | . 2 3.0 | . Xbad.fillna(10) . A sales numbers . 0 1.0 | 20.0 | . 1 10.0 | 30.0 | . 2 3.0 | 10.0 | . jn.fill_empty( Xbad, columns=[&quot;A&quot;, &quot; sales numbers &quot;], value=10, ) . A sales numbers . 0 1.0 | 20.0 | . 1 10.0 | 30.0 | . 2 3.0 | 10.0 | . import pandas as pd url = &quot;https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.xls&quot; df = pd.read_excel(url) orig_df = df df.isna().any().any() . True .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter5/",
            "relUrl": "/chapter5/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "4장 누락된 데이터",
            "content": "&#54596;&#50836;&#54620; &#54056;&#53412;&#51648; . &#45936;&#51060;&#53552;&#51032; &#49688;&#51665; . url = &quot;https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.xls&quot; df = pd.read_excel(url) orig_df = df . 4.1 &#45572;&#46973;&#46108; &#45936;&#51060;&#53552;&#51032; &#48516;&#49437; . df.isnull().mean() * 100 . pclass 0.000000 survived 0.000000 name 0.000000 sex 0.000000 age 20.091673 sibsp 0.000000 parch 0.000000 ticket 0.000000 fare 0.076394 cabin 77.463713 embarked 0.152788 boat 62.872422 body 90.756303 home.dest 43.086325 dtype: float64 . import missingno as msno ax = msno.matrix(orig_df.sample(500)) plt.show() . fig, ax = plt.subplots(figsize=(6, 4)) (1 - df.isnull().mean()).abs().plot.bar(ax=ax) plt.show() . ax = msno.bar(orig_df.sample(500)) plt.show() . ax = msno.heatmap(df, figsize=(6, 6)) plt.show() . ax = msno.dendrogram(df) plt.show() . 4.2 &#45572;&#46973;&#46108; &#45936;&#51060;&#53552;&#51032; &#49325;&#51228; . df1 = df.dropna() . df1 = df.drop(columns=&quot;cabin&quot;) . df1 = df.dropna(axis=1) . 4.3 &#45936;&#51060;&#53552;&#51032; &#45824;&#52824; . from sklearn.impute import SimpleImputer num_cols = df.select_dtypes( include=&quot;number&quot; ).columns im = SimpleImputer() # 평균 imputed = im.fit_transform(df[num_cols]) . 4.4 &#51648;&#49884;&#51088; &#50676;&#51032; &#52628;&#44032; . def add_indicator(col): def wrapper(df): return df[col].isna().astype(int) return wrapper df1 = df.assign(cabin_missing=add_indicator(&quot;cabin&quot;)) . df1.head(10) . pclass survived name sex age sibsp parch ticket fare cabin embarked boat body home.dest cabin_missing . 0 1 | 1 | Allen, Miss. Elisabeth Walton | female | 29.0000 | 0 | 0 | 24160 | 211.3375 | B5 | S | 2 | NaN | St Louis, MO | 0 | . 1 1 | 1 | Allison, Master. Hudson Trevor | male | 0.9167 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | 11 | NaN | Montreal, PQ / Chesterville, ON | 0 | . 2 1 | 0 | Allison, Miss. Helen Loraine | female | 2.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | 0 | . 3 1 | 0 | Allison, Mr. Hudson Joshua Creighton | male | 30.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | 135.0 | Montreal, PQ / Chesterville, ON | 0 | . 4 1 | 0 | Allison, Mrs. Hudson J C (Bessie Waldo Daniels) | female | 25.0000 | 1 | 2 | 113781 | 151.5500 | C22 C26 | S | NaN | NaN | Montreal, PQ / Chesterville, ON | 0 | . 5 1 | 1 | Anderson, Mr. Harry | male | 48.0000 | 0 | 0 | 19952 | 26.5500 | E12 | S | 3 | NaN | New York, NY | 0 | . 6 1 | 1 | Andrews, Miss. Kornelia Theodosia | female | 63.0000 | 1 | 0 | 13502 | 77.9583 | D7 | S | 10 | NaN | Hudson, NY | 0 | . 7 1 | 0 | Andrews, Mr. Thomas Jr | male | 39.0000 | 0 | 0 | 112050 | 0.0000 | A36 | S | NaN | NaN | Belfast, NI | 0 | . 8 1 | 1 | Appleton, Mrs. Edward Dale (Charlotte Lamson) | female | 53.0000 | 2 | 0 | 11769 | 51.4792 | C101 | S | D | NaN | Bayside, Queens, NY | 0 | . 9 1 | 0 | Artagaveytia, Mr. Ramon | male | 71.0000 | 0 | 0 | PC 17609 | 49.5042 | NaN | C | NaN | 22.0 | Montevideo, Uruguay | 1 | .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter4/",
            "relUrl": "/chapter4/",
            "date": " • Mar 8, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "3장 분류 문제 둘러보기(타이타닉 데이터셋)",
            "content": "3.2 &#54596;&#50836;&#54620; &#54056;&#53412;&#51648; . 3.5 &#45936;&#51060;&#53552;&#51032; &#49688;&#51665; . url = &quot;https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3.xls&quot; df = pd.read_excel(url) orig_df = df . df.columns . Index([&#39;pclass&#39;, &#39;survived&#39;, &#39;name&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;ticket&#39;, &#39;fare&#39;, &#39;cabin&#39;, &#39;embarked&#39;, &#39;boat&#39;, &#39;body&#39;, &#39;home.dest&#39;], dtype=&#39;object&#39;) . 3.6 &#45936;&#51060;&#53552;&#51032; &#51221;&#47532; . df.dtypes . pclass int64 survived int64 name object sex object age float64 sibsp int64 parch int64 ticket object fare float64 cabin object embarked object boat object body float64 home.dest object dtype: object . df.shape . (1309, 14) . df.describe().iloc[:, :2] . pclass survived . count 1309.000000 | 1309.000000 | . mean 2.294882 | 0.381971 | . std 0.837836 | 0.486055 | . min 1.000000 | 0.000000 | . 25% 2.000000 | 0.000000 | . 50% 3.000000 | 0.000000 | . 75% 3.000000 | 1.000000 | . max 3.000000 | 1.000000 | . df.isnull().sum() . pclass 0 survived 0 name 0 sex 0 age 263 sibsp 0 parch 0 ticket 0 fare 1 cabin 1014 embarked 2 boat 823 body 1188 home.dest 564 dtype: int64 . mask = df.isnull().any(axis=1) . mask.head() . 0 True 1 True 2 True 3 True 4 True dtype: bool . df[mask].body.head() . 0 NaN 1 NaN 2 NaN 3 135.0 4 NaN Name: body, dtype: float64 . df.sex.value_counts(dropna=False) . male 843 female 466 Name: sex, dtype: int64 . df.embarked.value_counts(dropna=False) . S 914 C 270 Q 123 NaN 2 Name: embarked, dtype: int64 . 3.7 &#53945;&#51669;&#51032; &#49373;&#49457; . name = df.name name.head(3) . 0 Allen, Miss. Elisabeth Walton 1 Allison, Master. Hudson Trevor 2 Allison, Miss. Helen Loraine Name: name, dtype: object . df = df.drop( columns=[&quot;name&quot;, &quot;ticket&quot;, &quot;home.dest&quot;, &quot;boat&quot;, &quot;body&quot;, &quot;cabin&quot;] ) . df = pd.get_dummies(df) . df.columns . Index([&#39;pclass&#39;, &#39;survived&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;sex_female&#39;, &#39;sex_male&#39;, &#39;embarked_C&#39;, &#39;embarked_Q&#39;, &#39;embarked_S&#39;], dtype=&#39;object&#39;) . df = df.drop(columns=&quot;sex_male&quot;) . df = pd.get_dummies(df, drop_first=True) . df.columns . Index([&#39;pclass&#39;, &#39;survived&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;sex_female&#39;, &#39;embarked_C&#39;, &#39;embarked_Q&#39;, &#39;embarked_S&#39;], dtype=&#39;object&#39;) . y = df.survived X = df.drop(columns=&quot;survived&quot;) . 3.8 &#49368;&#54540; &#45936;&#51060;&#53552; . X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.3, random_state=42) . 3.9 &#45936;&#51060;&#53552;&#51032; &#45824;&#52824; . from sklearn.experimental import ( enable_iterative_imputer, ) from sklearn import impute . num_cols = [ &quot;pclass&quot;, &quot;age&quot;, &quot;sibsp&quot;, &quot;parch&quot;, &quot;fare&quot;, &quot;sex_female&quot;, ] . imputer = impute.IterativeImputer() imputed = imputer.fit_transform( X_train[num_cols] ) X_train.loc[:, num_cols] = imputed imputed = imputer.transform(X_test[num_cols]) X_test.loc[:, num_cols] = imputed . meds = X_train.median() X_train = X_train.fillna(meds) X_test = X_test.fillna(meds) . X_train.head() . pclass age sibsp parch fare sex_female embarked_C embarked_Q embarked_S . 1214 3.0 | 26.984481 | 0.0 | 0.0 | 8.6625 | 0.0 | 0 | 0 | 1 | . 677 3.0 | 26.000000 | 0.0 | 0.0 | 7.8958 | 0.0 | 0 | 0 | 1 | . 534 2.0 | 19.000000 | 0.0 | 0.0 | 26.0000 | 1.0 | 0 | 0 | 1 | . 1174 3.0 | 0.437798 | 8.0 | 2.0 | 69.5500 | 1.0 | 0 | 0 | 1 | . 864 3.0 | 28.000000 | 0.0 | 0.0 | 7.7750 | 1.0 | 0 | 0 | 1 | . 3.10 &#45936;&#51060;&#53552;&#51032; &#54364;&#51456;&#54868; . cols = &quot;pclass,age,sibsp,fare&quot;.split(&quot;,&quot;) sca = preprocessing.StandardScaler() . X_train = sca.fit_transform(X_train) X_train = pd.DataFrame(X_train[:, :4], columns=cols) X_test = sca.transform(X_test) X_test = pd.DataFrame(X_test[:, :4], columns=cols) . 3.11 &#47532;&#54057;&#53552;&#47553; . def tweak_titanic(df): df = df.drop( columns=[ &quot;name&quot;, &quot;ticket&quot;, &quot;home.dest&quot;, &quot;boat&quot;, &quot;body&quot;, &quot;cabin&quot;, ] ).pipe(pd.get_dummies, drop_first=True) return df def get_train_test_X_y(df, y_col, size=0.3, std_cols=None): y = df[y_col] X = df.drop(columns=y_col) X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=size, random_state=42 ) cols = X.columns num_cols = [ &quot;pclass&quot;, &quot;age&quot;, &quot;sibsp&quot;, &quot;parch&quot;, &quot;fare&quot;, ] fi = impute.IterativeImputer() X_train.loc[:, num_cols] = fi.fit_transform(X_train[num_cols]) X_test.loc[:, num_cols] = fi.transform(X_test[num_cols]) if std_cols: std = preprocessing.StandardScaler() X_train.loc[:, std_cols] = std.fit_transform(X_train[std_cols]) X_test.loc[:, std_cols] = std.transform(X_test[std_cols]) return X_train, X_test, y_train, y_test . ti_df = tweak_titanic(orig_df) std_cols = &quot;pclass,age,sibsp,fare&quot;.split(&quot;,&quot;) X_train, X_test, y_train, y_test = get_train_test_X_y(ti_df, &quot;survived&quot;, std_cols=std_cols) . 3.12 &#48288;&#51060;&#49828;&#46972;&#51064; &#47784;&#45944; . from sklearn.dummy import DummyClassifier bm = DummyClassifier() bm.fit(X_train, y_train) bm.score(X_test, y_test) # 정확도 . 0.5623409669211196 . from sklearn import metrics metrics.precision_score(y_test, bm.predict(X_test)) . 0.44 . 3.13 &#45796;&#50577;&#54620; &#50508;&#44256;&#47532;&#51608; . X = pd.concat([X_train, X_test]) y = pd.concat([y_train, y_test]) . from sklearn import model_selection from sklearn.dummy import DummyClassifier from sklearn.linear_model import ( LogisticRegression, ) from sklearn.tree import DecisionTreeClassifier from sklearn.neighbors import ( KNeighborsClassifier, ) from sklearn.naive_bayes import GaussianNB from sklearn.svm import SVC from sklearn.ensemble import ( RandomForestClassifier, ) import xgboost . for model in [ DummyClassifier, LogisticRegression, DecisionTreeClassifier, KNeighborsClassifier, GaussianNB, SVC, RandomForestClassifier, xgboost.XGBClassifier, ]: cls = model() kfold = model_selection.KFold(n_splits=10, random_state=42) s = model_selection.cross_val_score(cls, X, y, scoring=&quot;roc_auc&quot;, cv=kfold) print(f&quot;{model.__name__:22} AUC: {s.mean():.3f} STD: {s.std():.2f}&quot;) . DummyClassifier AUC: 0.523 STD: 0.03 LogisticRegression AUC: 0.843 STD: 0.03 DecisionTreeClassifier AUC: 0.762 STD: 0.03 KNeighborsClassifier AUC: 0.830 STD: 0.05 GaussianNB AUC: 0.817 STD: 0.04 SVC AUC: 0.837 STD: 0.05 RandomForestClassifier AUC: 0.845 STD: 0.03 XGBClassifier AUC: 0.863 STD: 0.04 . 3.14 &#49828;&#53468;&#53433; . from mlxtend.classifier import ( StackingClassifier, ) clfs = [ x() for x in [ LogisticRegression, DecisionTreeClassifier, KNeighborsClassifier, GaussianNB, SVC, RandomForestClassifier, ] ] stack = StackingClassifier( classifiers=clfs, meta_classifier=LogisticRegression(), ) kfold = model_selection.KFold(n_splits=10, random_state=42) s = model_selection.cross_val_score(stack, X, y, scoring=&quot;roc_auc&quot;, cv=kfold) print(f&quot;{stack.__class__.__name__} AUC: {s.mean():.3f} STD: {s.std():.2f}&quot;) . StackingClassifier AUC: 0.785 STD: 0.04 . 3.15 &#47784;&#45944; &#47564;&#46308;&#44592; . rf = ensemble.RandomForestClassifier(n_estimators=100, random_state=42) rf.fit(X_train, y_train) . RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None, criterion=&#39;gini&#39;, max_depth=None, max_features=&#39;auto&#39;, max_leaf_nodes=None, max_samples=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None, oob_score=False, random_state=42, verbose=0, warm_start=False) . 3.16 &#47784;&#45944;&#51032; &#54217;&#44032; . rf.score(X_test, y_test) . 0.7837150127226463 . metrics.precision_score(y_test, rf.predict(X_test)) . 0.7916666666666666 . for col, val in sorted(zip(X_train.columns, rf.feature_importances_), key=lambda x: x[1], reverse=True)[:5]: print(f&quot;{col:10}{val:10.3f}&quot;) . age 0.285 fare 0.262 sex_male 0.241 pclass 0.089 sibsp 0.050 . 3.17 &#47784;&#45944;&#51032; &#52572;&#51201;&#54868; . rf4 = ensemble.RandomForestClassifier() params = { &quot;max_features&quot;: [0.4, &quot;auto&quot;], &quot;n_estimators&quot;: [15, 200], &quot;min_samples_leaf&quot;: [1, 0.1], &quot;random_state&quot;: [42], } cv = model_selection.GridSearchCV(rf4, params, n_jobs=-1).fit(X_train, y_train) print(cv.best_params_) . {&#39;max_features&#39;: 0.4, &#39;min_samples_leaf&#39;: 1, &#39;n_estimators&#39;: 200, &#39;random_state&#39;: 42} . rf5 = ensemble.RandomForestClassifier( **{ &quot;max_features&quot;: &quot;auto&quot;, &quot;min_samples_leaf&quot;: 0.1, &quot;n_estimators&quot;: 200, &quot;random_state&quot;: 42, } ) rf5.fit(X_train, y_train) rf5.score(X_test, y_test) . 0.7073791348600509 . 3.18 &#50724;&#52264; &#54665;&#47148; . from sklearn.metrics import confusion_matrix y_pred = rf5.predict(X_test) confusion_matrix(y_test, y_pred) . array([[217, 7], [108, 61]]) . mapping = {0: &quot;died&quot;, 1: &quot;survived&quot;} fig, ax = plt.subplots(figsize=(6, 6)) cm_viz = ConfusionMatrix( rf5, classes=[&quot;died&quot;, &quot;survived&quot;], label_encoder=mapping, ) cm_viz.score(X_test, y_test) cm_viz.poof() plt.show() . 3.19 ROC &#44257;&#49440; . y_pred = rf5.predict(X_test) roc_auc_score(y_test, y_pred) . 0.6648483727810651 . fig, ax = plt.subplots(figsize=(6, 6)) roc_viz = ROCAUC(rf5) roc_viz.score(X_test, y_test) roc_viz.poof() plt.show() . 3.20 &#54617;&#49845; &#44257;&#49440; . import numpy as np fig, ax = plt.subplots(figsize=(6, 4)) cv = StratifiedKFold(12) sizes = np.linspace(0.3, 1.0, 10) lc_viz = LearningCurve( rf5, cv=cv, train_sizes=sizes, scoring=&quot;f1_weighted&quot;, n_jobs=4, ax=ax, ) lc_viz.fit(X, y) lc_viz.poof() plt.show() . 3.21 &#47784;&#45944;&#51032; &#48176;&#54252; . import pickle pic = pickle.dumps(rf5) rf6 = pickle.loads(pic) y_pred = rf6.predict(X_test) roc_auc_score(y_test, y_pred) . 0.6648483727810651 .",
            "url": "https://deep-diver.github.io/pocket-ml-reference-korean/chapter3/",
            "relUrl": "/chapter3/",
            "date": " • Mar 8, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://deep-diver.github.io/pocket-ml-reference-korean/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://deep-diver.github.io/pocket-ml-reference-korean/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}